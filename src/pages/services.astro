---
// Importar el layout y componentes
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

// Obtener las publicaciones
const posts = await getCollection('posts');

// Ordenar los posts por fecha de manera descendente
const sortedPosts = posts.sort((a, b) => new Date(b.data.date) - new Date(a.data.date));
---

<Layout   
  title="Servicios"
  description='Todo lo que te puedo ofrecer como desarrollaodr full-stack.'
>

<main class="px-4">


  <div class="space-y-24"></div>
  <section class="services-section py-8 px-4">
    <h1 class="services-title text-4xl font-bold mb-4">Join the Services</h1>
    <p class="services-description text-lg mb-4">
      Stay updated with my latest tutorials, projects, and coding insights. Subscribe to the services and get exclusive content directly in your inbox!
    </p>
    
  </section>
</div>
</main>

</Layout>

<style>
/* Estilos generales para la sección de services */
.services-section {
  padding: 2rem;
  padding-top: 100px;
  border-radius: 12px;
  max-width: 900px;
  margin: 0 auto;
  transition: background-color 0.3s ease;
}



/* Título de la services */
.services-title {
  text-align: center;
  color: var(--brand-blue);
  margin-bottom: 2rem;
}

/* Descripción de la services */
.services-description {
  text-align: center;
  margin-bottom: 2rem;
  color: var(--text-color-dark);
}

html.dark .services-description {
  color: var(--text-color-light);
}

/* Estilos del formulario */
.services-form {
  max-width: 500px;
  margin: 0 auto 2rem;
}

.input-field {
  padding: 0.75rem;
  border: 1px solid rgba(var(--accent-dark), 0.4);
  border-radius: 8px;
  font-size: 1rem;
  background-color: rgba(var(--accent-light), 0.15);
  color: var(--text-color-dark);
}

html.dark .input-field {
  background-color: rgba(var(--accent-dark), 0.2);
  color: var(--text-color-light);
}

.input-field:focus {
  border-color: var(--accent);
  outline: none;
  box-shadow: 0 0 0 2px rgba(var(--accent), 0.5);
}

.submit-btn {
  background-color: var(--brand-blue);
  color: white;
  font-size: 1.1rem;
  padding: 0.75rem;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease, transform 0.2s ease;
}

.submit-btn:hover {
  background-color: rgba(var(--brand-blue), 0.8);
  transform: translateY(-3px);
}

html.dark .submit-btn {
  background-color: var(--accent);
}

html.dark .submit-btn:hover {
  background-color: rgba(var(--accent-light), 0.9);
}

/* Listado de posts en formato grid */
.link-card-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1.5rem;
}

/* Responsividad */
@media (max-width: 768px) {
  .services-title {
    font-size: 2.5rem;
  }

  .services-description {
    font-size: 1rem;
  }

  .input-field {
    font-size: 0.9rem;
  }

  .submit-btn {
    font-size: 1rem;
  }
}
</style>

<script>
document.getElementById('services-form').addEventListener('submit', async function (e) {
  e.preventDefault();

  const name = document.getElementById('name').value;
  const email = document.getElementById('email').value;

  try {
    const response = await fetch('/api/subscribe', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ name, email }),  // Enviar nombre y email
    });

    if (response.ok) {
      showNotification('Te has suscrito correctamente a la services', 'success');
    } else if (response.status === 409) {
      showNotification('Este correo ya está suscrito a la services.', 'error');
    } else if (response.status >= 500) {
      showNotification('Hubo un error en el servidor. Intenta nuevamente más tarde.', 'error');
    } else {
      showNotification('Hubo un error al suscribirte. Intenta nuevamente', 'error');
    }
  } catch (error) {
    console.error('Error de red:', error);
    showNotification('No se pudo conectar con el servidor. Revisa tu conexión a Internet.', 'error');
  }
});

function showNotification(message, type) {
  const notification = document.getElementById('services-notification');
  notification.textContent = message;
  notification.className = `notification ${type}`;
  notification.style.display = 'block';
  setTimeout(() => {
    notification.style.display = 'none';
  }, 5000);
}

</script>
